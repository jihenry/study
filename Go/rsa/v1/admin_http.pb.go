// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	AccountLogin(context.Context, *AccountLoginReq) (*LoginRsp, error)
	AddMember(context.Context, *AddMemberReq) (*AddMemberRsp, error)
	AddMemberWeb(context.Context, *AddMemberWebReq) (*AddMemberWebRsp, error)
	AuthMember(context.Context, *AuthMemberReq) (*AuthMemberRsp, error)
	BindPhone(context.Context, *BindPhoneReq) (*BindPhoneRsp, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderRsp, error)
	FreezeMember(context.Context, *FreezeMemberReq) (*FreezeMemberRsp, error)
	GetOrderStatus(context.Context, *OrderStatusReq) (*OrderStatusRsp, error)
	GetSmsCode(context.Context, *GetSmsCodeReq) (*GetSmsCodeRsp, error)
	GiveCoupon(context.Context, *GiveCouponReq) (*GiveCouponRsp, error)
	GivePropWeb(context.Context, *GivePropWebReq) (*GivePropWebRsp, error)
	ListCoupon(context.Context, *ListCouponReq) (*ListCouponRsp, error)
	ListGiveLog(context.Context, *ListLogReq) (*ListLogRsp, error)
	ListLevelMemberId(context.Context, *ListLevelIDsReq) (*ListLevelIDsRsp, error)
	ListMember(context.Context, *ListMemberReq) (*ListMemberRsp, error)
	ListRechargeLog(context.Context, *ListLogReq) (*ListLogRsp, error)
	ListUseLog(context.Context, *ListLogReq) (*ListLogRsp, error)
	ModPwd(context.Context, *ModPwdReq) (*ModPwdRsp, error)
	PhoneLogin(context.Context, *PhoneLoginReq) (*LoginRsp, error)
	ResetPwd(context.Context, *ResetPwdReq) (*LoginRsp, error)
	SearchMember(context.Context, *SearchMemberReq) (*SearchMemberRsp, error)
	SearchPlayer(context.Context, *SearchPlayerReq) (*SearchPlayerRsp, error)
	UseCoupon(context.Context, *UseCouponReq) (*UseCouponRsp, error)
	VerifySmsCode(context.Context, *VerifySmsCodeReq) (*VerifySmsCodeRsp, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/login/account", _Admin_AccountLogin0_HTTP_Handler(srv))
	r.POST("/login/phone", _Admin_PhoneLogin0_HTTP_Handler(srv))
	r.POST("/login/bind_phone", _Admin_BindPhone0_HTTP_Handler(srv))
	r.POST("/login/get_sms_code", _Admin_GetSmsCode0_HTTP_Handler(srv))
	r.POST("/login/verify_sms_code", _Admin_VerifySmsCode0_HTTP_Handler(srv))
	r.POST("/login/reset_pwd", _Admin_ResetPwd0_HTTP_Handler(srv))
	r.POST("/login/mod_pwd", _Admin_ModPwd0_HTTP_Handler(srv))
	r.POST("/coupon/list", _Admin_ListCoupon0_HTTP_Handler(srv))
	r.POST("/coupon/give", _Admin_GiveCoupon0_HTTP_Handler(srv))
	r.POST("/coupon/use", _Admin_UseCoupon0_HTTP_Handler(srv))
	r.POST("/coupon/create", _Admin_CreateOrder0_HTTP_Handler(srv))
	r.POST("/coupon/get_order_status", _Admin_GetOrderStatus0_HTTP_Handler(srv))
	r.POST("/log/use", _Admin_ListUseLog0_HTTP_Handler(srv))
	r.POST("/log/give", _Admin_ListGiveLog0_HTTP_Handler(srv))
	r.POST("/log/recharge", _Admin_ListRechargeLog0_HTTP_Handler(srv))
	r.POST("/member/list", _Admin_ListMember0_HTTP_Handler(srv))
	r.POST("/member/auth", _Admin_AuthMember0_HTTP_Handler(srv))
	r.POST("/member/freeze", _Admin_FreezeMember0_HTTP_Handler(srv))
	r.POST("/member/search", _Admin_SearchMember0_HTTP_Handler(srv))
	r.POST("/member/list_level_ids", _Admin_ListLevelMemberId0_HTTP_Handler(srv))
	r.POST("/member/add", _Admin_AddMember0_HTTP_Handler(srv))
	r.POST("/player/search", _Admin_SearchPlayer0_HTTP_Handler(srv))
	r.POST("/web/add_member", _Admin_AddMemberWeb0_HTTP_Handler(srv))
	r.POST("/web/give_prop", _Admin_GivePropWeb0_HTTP_Handler(srv))
}

func _Admin_AccountLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountLoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/AccountLogin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountLogin(ctx, req.(*AccountLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_PhoneLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PhoneLoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/PhoneLogin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PhoneLogin(ctx, req.(*PhoneLoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_BindPhone0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindPhoneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/BindPhone")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindPhone(ctx, req.(*BindPhoneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindPhoneRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSmsCode0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSmsCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/GetSmsCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSmsCode(ctx, req.(*GetSmsCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSmsCodeRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_VerifySmsCode0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifySmsCodeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/VerifySmsCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifySmsCode(ctx, req.(*VerifySmsCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifySmsCodeRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ResetPwd0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPwdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ResetPwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPwd(ctx, req.(*ResetPwdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ModPwd0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ModPwdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ModPwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ModPwd(ctx, req.(*ModPwdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ModPwdRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoupon(ctx, req.(*ListCouponReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCouponRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_GiveCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GiveCouponReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/GiveCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GiveCoupon(ctx, req.(*GiveCouponReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GiveCouponRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_UseCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UseCouponReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/UseCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UseCoupon(ctx, req.(*UseCouponReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UseCouponRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateOrder0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/CreateOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetOrderStatus0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/GetOrderStatus")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrderStatus(ctx, req.(*OrderStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderStatusRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListUseLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListUseLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUseLog(ctx, req.(*ListLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListGiveLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListGiveLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGiveLog(ctx, req.(*ListLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListRechargeLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListRechargeLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRechargeLog(ctx, req.(*ListLogReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMember(ctx, req.(*ListMemberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMemberRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_AuthMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthMemberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/AuthMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AuthMember(ctx, req.(*AuthMemberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthMemberRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_FreezeMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FreezeMemberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/FreezeMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FreezeMember(ctx, req.(*FreezeMemberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FreezeMemberRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_SearchMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchMemberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/SearchMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchMember(ctx, req.(*SearchMemberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMemberRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListLevelMemberId0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLevelIDsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/ListLevelMemberId")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLevelMemberId(ctx, req.(*ListLevelIDsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLevelIDsRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMemberReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/AddMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddMember(ctx, req.(*AddMemberReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMemberRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_SearchPlayer0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchPlayerReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/SearchPlayer")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchPlayer(ctx, req.(*SearchPlayerReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchPlayerRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_AddMemberWeb0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddMemberWebReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/AddMemberWeb")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddMemberWeb(ctx, req.(*AddMemberWebReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddMemberWebRsp)
		return ctx.Result(200, reply)
	}
}

func _Admin_GivePropWeb0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GivePropWebReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/cvadmin.api.v1.Admin/GivePropWeb")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GivePropWeb(ctx, req.(*GivePropWebReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GivePropWebRsp)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AccountLogin(ctx context.Context, req *AccountLoginReq, opts ...http.CallOption) (rsp *LoginRsp, err error)
	AddMember(ctx context.Context, req *AddMemberReq, opts ...http.CallOption) (rsp *AddMemberRsp, err error)
	AddMemberWeb(ctx context.Context, req *AddMemberWebReq, opts ...http.CallOption) (rsp *AddMemberWebRsp, err error)
	AuthMember(ctx context.Context, req *AuthMemberReq, opts ...http.CallOption) (rsp *AuthMemberRsp, err error)
	BindPhone(ctx context.Context, req *BindPhoneReq, opts ...http.CallOption) (rsp *BindPhoneRsp, err error)
	CreateOrder(ctx context.Context, req *CreateOrderReq, opts ...http.CallOption) (rsp *CreateOrderRsp, err error)
	FreezeMember(ctx context.Context, req *FreezeMemberReq, opts ...http.CallOption) (rsp *FreezeMemberRsp, err error)
	GetOrderStatus(ctx context.Context, req *OrderStatusReq, opts ...http.CallOption) (rsp *OrderStatusRsp, err error)
	GetSmsCode(ctx context.Context, req *GetSmsCodeReq, opts ...http.CallOption) (rsp *GetSmsCodeRsp, err error)
	GiveCoupon(ctx context.Context, req *GiveCouponReq, opts ...http.CallOption) (rsp *GiveCouponRsp, err error)
	GivePropWeb(ctx context.Context, req *GivePropWebReq, opts ...http.CallOption) (rsp *GivePropWebRsp, err error)
	ListCoupon(ctx context.Context, req *ListCouponReq, opts ...http.CallOption) (rsp *ListCouponRsp, err error)
	ListGiveLog(ctx context.Context, req *ListLogReq, opts ...http.CallOption) (rsp *ListLogRsp, err error)
	ListLevelMemberId(ctx context.Context, req *ListLevelIDsReq, opts ...http.CallOption) (rsp *ListLevelIDsRsp, err error)
	ListMember(ctx context.Context, req *ListMemberReq, opts ...http.CallOption) (rsp *ListMemberRsp, err error)
	ListRechargeLog(ctx context.Context, req *ListLogReq, opts ...http.CallOption) (rsp *ListLogRsp, err error)
	ListUseLog(ctx context.Context, req *ListLogReq, opts ...http.CallOption) (rsp *ListLogRsp, err error)
	ModPwd(ctx context.Context, req *ModPwdReq, opts ...http.CallOption) (rsp *ModPwdRsp, err error)
	PhoneLogin(ctx context.Context, req *PhoneLoginReq, opts ...http.CallOption) (rsp *LoginRsp, err error)
	ResetPwd(ctx context.Context, req *ResetPwdReq, opts ...http.CallOption) (rsp *LoginRsp, err error)
	SearchMember(ctx context.Context, req *SearchMemberReq, opts ...http.CallOption) (rsp *SearchMemberRsp, err error)
	SearchPlayer(ctx context.Context, req *SearchPlayerReq, opts ...http.CallOption) (rsp *SearchPlayerRsp, err error)
	UseCoupon(ctx context.Context, req *UseCouponReq, opts ...http.CallOption) (rsp *UseCouponRsp, err error)
	VerifySmsCode(ctx context.Context, req *VerifySmsCodeReq, opts ...http.CallOption) (rsp *VerifySmsCodeRsp, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AccountLogin(ctx context.Context, in *AccountLoginReq, opts ...http.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/login/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/AccountLogin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) AddMember(ctx context.Context, in *AddMemberReq, opts ...http.CallOption) (*AddMemberRsp, error) {
	var out AddMemberRsp
	pattern := "/member/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/AddMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) AddMemberWeb(ctx context.Context, in *AddMemberWebReq, opts ...http.CallOption) (*AddMemberWebRsp, error) {
	var out AddMemberWebRsp
	pattern := "/web/add_member"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/AddMemberWeb"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) AuthMember(ctx context.Context, in *AuthMemberReq, opts ...http.CallOption) (*AuthMemberRsp, error) {
	var out AuthMemberRsp
	pattern := "/member/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/AuthMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) BindPhone(ctx context.Context, in *BindPhoneReq, opts ...http.CallOption) (*BindPhoneRsp, error) {
	var out BindPhoneRsp
	pattern := "/login/bind_phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/BindPhone"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...http.CallOption) (*CreateOrderRsp, error) {
	var out CreateOrderRsp
	pattern := "/coupon/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/CreateOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) FreezeMember(ctx context.Context, in *FreezeMemberReq, opts ...http.CallOption) (*FreezeMemberRsp, error) {
	var out FreezeMemberRsp
	pattern := "/member/freeze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/FreezeMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetOrderStatus(ctx context.Context, in *OrderStatusReq, opts ...http.CallOption) (*OrderStatusRsp, error) {
	var out OrderStatusRsp
	pattern := "/coupon/get_order_status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/GetOrderStatus"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSmsCode(ctx context.Context, in *GetSmsCodeReq, opts ...http.CallOption) (*GetSmsCodeRsp, error) {
	var out GetSmsCodeRsp
	pattern := "/login/get_sms_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/GetSmsCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GiveCoupon(ctx context.Context, in *GiveCouponReq, opts ...http.CallOption) (*GiveCouponRsp, error) {
	var out GiveCouponRsp
	pattern := "/coupon/give"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/GiveCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GivePropWeb(ctx context.Context, in *GivePropWebReq, opts ...http.CallOption) (*GivePropWebRsp, error) {
	var out GivePropWebRsp
	pattern := "/web/give_prop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/GivePropWeb"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListCoupon(ctx context.Context, in *ListCouponReq, opts ...http.CallOption) (*ListCouponRsp, error) {
	var out ListCouponRsp
	pattern := "/coupon/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListGiveLog(ctx context.Context, in *ListLogReq, opts ...http.CallOption) (*ListLogRsp, error) {
	var out ListLogRsp
	pattern := "/log/give"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListGiveLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListLevelMemberId(ctx context.Context, in *ListLevelIDsReq, opts ...http.CallOption) (*ListLevelIDsRsp, error) {
	var out ListLevelIDsRsp
	pattern := "/member/list_level_ids"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListLevelMemberId"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMember(ctx context.Context, in *ListMemberReq, opts ...http.CallOption) (*ListMemberRsp, error) {
	var out ListMemberRsp
	pattern := "/member/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListRechargeLog(ctx context.Context, in *ListLogReq, opts ...http.CallOption) (*ListLogRsp, error) {
	var out ListLogRsp
	pattern := "/log/recharge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListRechargeLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListUseLog(ctx context.Context, in *ListLogReq, opts ...http.CallOption) (*ListLogRsp, error) {
	var out ListLogRsp
	pattern := "/log/use"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ListUseLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ModPwd(ctx context.Context, in *ModPwdReq, opts ...http.CallOption) (*ModPwdRsp, error) {
	var out ModPwdRsp
	pattern := "/login/mod_pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ModPwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) PhoneLogin(ctx context.Context, in *PhoneLoginReq, opts ...http.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/login/phone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/PhoneLogin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...http.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/login/reset_pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/ResetPwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SearchMember(ctx context.Context, in *SearchMemberReq, opts ...http.CallOption) (*SearchMemberRsp, error) {
	var out SearchMemberRsp
	pattern := "/member/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/SearchMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SearchPlayer(ctx context.Context, in *SearchPlayerReq, opts ...http.CallOption) (*SearchPlayerRsp, error) {
	var out SearchPlayerRsp
	pattern := "/player/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/SearchPlayer"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UseCoupon(ctx context.Context, in *UseCouponReq, opts ...http.CallOption) (*UseCouponRsp, error) {
	var out UseCouponRsp
	pattern := "/coupon/use"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/UseCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) VerifySmsCode(ctx context.Context, in *VerifySmsCodeReq, opts ...http.CallOption) (*VerifySmsCodeRsp, error) {
	var out VerifySmsCodeRsp
	pattern := "/login/verify_sms_code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/cvadmin.api.v1.Admin/VerifySmsCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
